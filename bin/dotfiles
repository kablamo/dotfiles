#!/usr/bin/env perl

use strict;
use warnings;

use Path::Class qw/file dir/;
use File::Copy qw/move cp/;

my $home_dir     = dir('/home/eric');
my $dotfiles_dir = $home_dir->subdir('code/dotfiles');
my $links_dir    = $dotfiles_dir->subdir('links');
my $copy_dir     = $dotfiles_dir->subdir('copy');
my $backup_dir   = dir('/tmp/dotfiles-backup');

# remove dotfiles in $home_dir which are dead links
remove_dead_links($home_dir);

# create links in $home_dir to $links_dir
create_links($home_dir => $links_dir);

# copy files from $copy_dir to $home_dir
copy_files($copy_dir => $home_dir);

# update all the git submodules in $dotfiles_dir
`cd $dotfiles_dir && git submodule init && git submodule update`;

# done

sub remove_dead_links($home_dir) {
    my $home_dir = shift;

    while (my $file = $home_dir->next) {
        next unless $file->basename =~ /^\./;
        next if -e $file;
        print "unlink $file\n" if -l $file;
        unlink $file           if -l $file;
    }
}

sub create_links {
    my ($home_dir, $links_dir) = @_;

    while (my $file = $links_dir->next) {
        my $basename = $file->basename;
        next if $basename eq $links_dir->basename;
        next if $basename =~ /^\.\.$/;

        my $link = $home_dir->file($basename);
        next if -l $link;

        backup($link) || next;

        my $ln = "ln -s '$file' '$link'";
        print $ln, "\n";
        `$ln`;
        # TODO: check for errors
    }
}

# copy files from $copy_dir to $home_dir
sub copy_files {
    my ($copy_dir, $home_dir) = @_;

    while (my $from = $copy_dir->next) {
        my $basename = $from->basename;
        next if $basename eq $copy_dir->basename;
        next if $basename =~ /^\.\.$/;

        my $to = $home_dir->file($basename);

        backup($to) || next;

        cp($from, $to); # 'cp' preserves file perms. 'copy' doesn't.
    }
}

# Returns 1 if the file was backed up successfully
# Returns 1 if the file does not exist (no need to backup)
# Returns 0 if permisssions don't allow file to be moved
sub backup {
    my $file     = shift;
    my $basename = $file->basename;

    $backup_dir->mkpath;
    my $backup = $backup_dir->file($basename);

    return 1 unless -e $file;

    if (! -o $file) {
        print "Cannot backup $basename to $backup:  Permission denied.\n";
        return 0;
    }

    #print "backing up $basename to $backup\n";
    move($file, $backup);

    return 1;
}

